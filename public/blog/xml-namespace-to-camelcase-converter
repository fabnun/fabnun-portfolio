
        <!DOCTYPE html>
        <html lang="es">
        
          <head>
            <meta charset="utf-8" />
            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
            <meta name="viewport" content="width=device-width,initial-scale=1.0" />
            <meta name="author" content="Fabián Núñez" />
            <meta name="description" content="Portafolio, Curriculum y Blog de Fabián Núñez" />
            <base href="/" />
            <link rel="icon" href="/icon.svg" />
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
            <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;400&display=swap" />
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" crossorigin="anonymous" />
            <link rel="stylesheet" href="/blog/style.css?v=1676264127344">
            <link rel="stylesheet" href="/blog/normalize.css?v=1676264127344">
            <link rel="stylesheet" href="/blog/styles/paraiso-dark.min.css">
            <link rel="stylesheet" href="/blog/md.css?v=1676264127344">
            <script src="/blog/highlight.min.js"></script>
            
            <style>
              #idc-container-parent{
                display: none;
              }
            </style>
            <title>Conversor de namespaces a camelCase en XML</title>
          </head>
          <body>
            
            <div class="header">
              <div class="container">
                <div style="float: right;width: 90px;">
                  <span class="date">10/02/23</span><br>
                  <a class="date" href="/blog/">< Volver</a>
                </div>
                <h1 style="margin-top:0;font-size:28px">Conversor de namespaces a camelCase en XML</h1>
                <hr>
                <h3>TAGS: xml, namespace, camelcase, converter, react, svg, xml-js</h3>
              </div>
            </div>
            <div class="container">
              
              <div class="row">
                <div id="app" class="md col-12">

<p>Cuando trabajamos con archivos SVG en React, es común encontrar el siguiente error:</p>
<pre>error:<button onclick="copy(event)" style="float:right;color:yellow;font-weight:bolder;background:transparent;border:none;outline:none;">copiar</button><code class="language-error">SyntaxError: unknown file: Namespace tags are not supported by default. React&apos;s JSX doesn&apos;t support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.</code></pre><p>Este error surge debido a que React JSX no admite componentes que utilizan namespaces en etiquetas o atributos.</p>
<p>En mi caso, me topé con este problema cuando edité un archivo SVG en Inkscape. Afortunadamente, existe una solución sencilla para este problema: convertir los namespaces a formato camelCase.</p>
<p>Ejemplo: sketch:type -&gt; sketchType</p>
<p>Para llevar a cabo esta solución, utilizaremos la librería <a target="_blank" href="https://www.npmjs.com/package/xml-js" title="null">xml-js</a>, una librería que nos permite convertir xml a json y viceversa. Asi que comenzemos instalando xml-js:</p>
<pre>bash:<button onclick="copy(event)" style="float:right;color:yellow;font-weight:bolder;background:transparent;border:none;outline:none;">copiar</button><code class="language-bash">npm i xml-js</code></pre><p>y lo usamos de la siguiente forma:</p>
<pre>javascript:<button onclick="copy(event)" style="float:right;color:yellow;font-weight:bolder;background:transparent;border:none;outline:none;">copiar</button><code class="language-javascript">const xml2js = require(&apos;xml-js&apos;);

//XML DE EJEMPLO
const xml = `
&lt;foo:root xmlns:foo=&quot;http://ex.com/foo&quot;&gt;
  &lt;noChange&gt;value1&lt;/noChange&gt;
  &lt;foo:elem&gt;value2&lt;/foo:elem&gt;
&lt;/foo:root&gt;
`;

//FUNCION PARA CONVERTIR UN NAMESPACE A FORMATO CAMELCASE
const fnNameSpace2CamelCase = (val) =&gt; {
  if (val.indexOf(&apos;:&apos;) &gt; -1) {
    const parts = val.split(&apos;:&apos;);
    return parts[0] + parts[1].charAt(0).toUpperCase() + parts[1].slice(1);
  } else {
    return val;
  }
};

//OPCIONES PARA XML2JS
const options = {
  ignoreComment: true,
  //CONVIERTE LOS ELEMENTOS
  elementNameFn: fnNameSpace2CamelCase,
  //CONVIERTE LOS ATRIBUTOS
  attributeNameFn: fnNameSpace2CamelCase,
};

//CONVERTIMOS XML A JSON APLICANDO LAS OPCIONES ANTERIORES
const result = xml2js.xml2js(xml, options);
//Y LUEGO VOLVEMOS A CONVERTIR EL JSON A XML
const xmlModified = xml2js.js2xml(result);
console.log(xmlModified);</code></pre><p>Ahora, si quieres ahorrarte el trabajo, puedes usar el siguiente conversor online que construí en:</p>
<p><a href="/xml-namespace-to-camelcase-converter" title="null">fabnun.web.app/xml-namespace-to-camelcase-converter</a></p>



                </div>
              </div>
            </div>
            <span id="IDCommentsPostTitle" style="display:none"></span>
          </body>
          
          <script>

            async function copy(event) {
              try {
                const code=event.target.parentElement.children[1].innerText
                await navigator.clipboard.writeText(code);
                alert('Texto copiado al portapapeles.');
              } catch (err) {
                alert('Error al copiar texto al portapapeles: '+ err.message);
              }
            }
            var idcomments_acct = '7133cfcf914d938be0f4d8672fffda74';
            var idcomments_post_id;
            var idcomments_post_url;
            if(window.location.port==="8080"){
              let lastTime=window.localStorage.getItem('lastTime')||"0";
              setInterval(async () => {
                const resp=await fetch("/blog/updateTime?timestamp="+Date.now(),{
                  method: 'get'
                });
                const updateTime=await resp.text();
                if(updateTime!==lastTime){
                  console.log(lastTime, updateTime);
                  lastTime=updateTime;
                  window.localStorage.setItem('lastTime',lastTime);
                  window.location.reload();
                }
              }, 1000);
            }
          </script>
          <script type="text/javascript" src="https://www.intensedebate.com/js/genericCommentWrapperV2.js"></script>
          <script>
          const interval=setInterval(() => {
            const div=document.getElementById('idc-container-parent')
            if (div?.style){
              div.style.display='block';
              clearInterval(interval);
            }
          }, 200);
          document.querySelectorAll('.language-javascript,.language-html,.language-css,.language-java').forEach((el) => {
            hljs.highlightElement(el);
          });
          </script>
        </html>
      